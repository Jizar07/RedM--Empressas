"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "app/api/webhook/channel-messages/route";
exports.ids = ["app/api/webhook/channel-messages/route"];
exports.modules = {

/***/ "next/dist/compiled/next-server/app-page.runtime.dev.js":
/*!*************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-page.runtime.dev.js" ***!
  \*************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/app-page.runtime.dev.js");

/***/ }),

/***/ "next/dist/compiled/next-server/app-route.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-route.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/app-route.runtime.dev.js");

/***/ }),

/***/ "fs":
/*!*********************!*\
  !*** external "fs" ***!
  \*********************/
/***/ ((module) => {

module.exports = require("fs");

/***/ }),

/***/ "path":
/*!***********************!*\
  !*** external "path" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("path");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fwebhook%2Fchannel-messages%2Froute&page=%2Fapi%2Fwebhook%2Fchannel-messages%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fwebhook%2Fchannel-messages%2Froute.ts&appDir=%2Fmnt%2Fc%2FUsers%2Fjizar%2FOneDrive%2FDocuments%2FDiscordBot%2Ffrontend%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2Fmnt%2Fc%2FUsers%2Fjizar%2FOneDrive%2FDocuments%2FDiscordBot%2Ffrontend&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!":

  !*** ./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fwebhook%2Fchannel-messages%2Froute&page=%2Fapi%2Fwebhook%2Fchannel-messages%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fwebhook%2Fchannel-messages%2Froute.ts&appDir=%2Fmnt%2Fc%2FUsers%2Fjizar%2FOneDrive%2FDocuments%2FDiscordBot%2Ffrontend%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2Fmnt%2Fc%2FUsers%2Fjizar%2FOneDrive%2FDocuments%2FDiscordBot%2Ffrontend&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D! ***!
  \************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   originalPathname: () => (/* binding */ originalPathname),\n/* harmony export */   patchFetch: () => (/* binding */ patchFetch),\n/* harmony export */   requestAsyncStorage: () => (/* binding */ requestAsyncStorage),\n/* harmony export */   routeModule: () => (/* binding */ routeModule),\n/* harmony export */   serverHooks: () => (/* binding */ serverHooks),\n/* harmony export */   staticGenerationAsyncStorage: () => (/* binding */ staticGenerationAsyncStorage)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/future/route-modules/app-route/module.compiled */ \"(rsc)/./node_modules/next/dist/server/future/route-modules/app-route/module.compiled.js\");\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/future/route-kind */ \"(rsc)/./node_modules/next/dist/server/future/route-kind.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/server/lib/patch-fetch */ \"(rsc)/./node_modules/next/dist/server/lib/patch-fetch.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _mnt_c_Users_jizar_OneDrive_Documents_DiscordBot_frontend_app_api_webhook_channel_messages_route_ts__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./app/api/webhook/channel-messages/route.ts */ \"(rsc)/./app/api/webhook/channel-messages/route.ts\");\n\n\n\n\n// We inject the nextConfigOutput here so that we can use them in the route\n// module.\nconst nextConfigOutput = \"\"\nconst routeModule = new next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__.AppRouteRouteModule({\n    definition: {\n        kind: next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.APP_ROUTE,\n        page: \"/api/webhook/channel-messages/route\",\n        pathname: \"/api/webhook/channel-messages\",\n        filename: \"route\",\n        bundlePath: \"app/api/webhook/channel-messages/route\"\n    },\n    resolvedPagePath: \"/mnt/c/Users/jizar/OneDrive/Documents/DiscordBot/frontend/app/api/webhook/channel-messages/route.ts\",\n    nextConfigOutput,\n    userland: _mnt_c_Users_jizar_OneDrive_Documents_DiscordBot_frontend_app_api_webhook_channel_messages_route_ts__WEBPACK_IMPORTED_MODULE_3__\n});\n// Pull out the exports that we need to expose from the module. This should\n// be eliminated when we've moved the other routes to the new format. These\n// are used to hook into the route.\nconst { requestAsyncStorage, staticGenerationAsyncStorage, serverHooks } = routeModule;\nconst originalPathname = \"/api/webhook/channel-messages/route\";\nfunction patchFetch() {\n    return (0,next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__.patchFetch)({\n        serverHooks,\n        staticGenerationAsyncStorage\n    });\n}\n\n\n//# sourceMappingURL=app-route.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LWFwcC1sb2FkZXIuanM/bmFtZT1hcHAlMkZhcGklMkZ3ZWJob29rJTJGY2hhbm5lbC1tZXNzYWdlcyUyRnJvdXRlJnBhZ2U9JTJGYXBpJTJGd2ViaG9vayUyRmNoYW5uZWwtbWVzc2FnZXMlMkZyb3V0ZSZhcHBQYXRocz0mcGFnZVBhdGg9cHJpdmF0ZS1uZXh0LWFwcC1kaXIlMkZhcGklMkZ3ZWJob29rJTJGY2hhbm5lbC1tZXNzYWdlcyUyRnJvdXRlLnRzJmFwcERpcj0lMkZtbnQlMkZjJTJGVXNlcnMlMkZqaXphciUyRk9uZURyaXZlJTJGRG9jdW1lbnRzJTJGRGlzY29yZEJvdCUyRmZyb250ZW5kJTJGYXBwJnBhZ2VFeHRlbnNpb25zPXRzeCZwYWdlRXh0ZW5zaW9ucz10cyZwYWdlRXh0ZW5zaW9ucz1qc3gmcGFnZUV4dGVuc2lvbnM9anMmcm9vdERpcj0lMkZtbnQlMkZjJTJGVXNlcnMlMkZqaXphciUyRk9uZURyaXZlJTJGRG9jdW1lbnRzJTJGRGlzY29yZEJvdCUyRmZyb250ZW5kJmlzRGV2PXRydWUmdHNjb25maWdQYXRoPXRzY29uZmlnLmpzb24mYmFzZVBhdGg9JmFzc2V0UHJlZml4PSZuZXh0Q29uZmlnT3V0cHV0PSZwcmVmZXJyZWRSZWdpb249Jm1pZGRsZXdhcmVDb25maWc9ZTMwJTNEISIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7QUFBc0c7QUFDdkM7QUFDYztBQUNtRDtBQUNoSTtBQUNBO0FBQ0E7QUFDQSx3QkFBd0IsZ0hBQW1CO0FBQzNDO0FBQ0EsY0FBYyx5RUFBUztBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsWUFBWTtBQUNaLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQSxRQUFRLGlFQUFpRTtBQUN6RTtBQUNBO0FBQ0EsV0FBVyw0RUFBVztBQUN0QjtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ3VIOztBQUV2SCIsInNvdXJjZXMiOlsid2VicGFjazovL3JlZG0tZGFzaGJvYXJkLz84NTA0Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFwcFJvdXRlUm91dGVNb2R1bGUgfSBmcm9tIFwibmV4dC9kaXN0L3NlcnZlci9mdXR1cmUvcm91dGUtbW9kdWxlcy9hcHAtcm91dGUvbW9kdWxlLmNvbXBpbGVkXCI7XG5pbXBvcnQgeyBSb3V0ZUtpbmQgfSBmcm9tIFwibmV4dC9kaXN0L3NlcnZlci9mdXR1cmUvcm91dGUta2luZFwiO1xuaW1wb3J0IHsgcGF0Y2hGZXRjaCBhcyBfcGF0Y2hGZXRjaCB9IGZyb20gXCJuZXh0L2Rpc3Qvc2VydmVyL2xpYi9wYXRjaC1mZXRjaFwiO1xuaW1wb3J0ICogYXMgdXNlcmxhbmQgZnJvbSBcIi9tbnQvYy9Vc2Vycy9qaXphci9PbmVEcml2ZS9Eb2N1bWVudHMvRGlzY29yZEJvdC9mcm9udGVuZC9hcHAvYXBpL3dlYmhvb2svY2hhbm5lbC1tZXNzYWdlcy9yb3V0ZS50c1wiO1xuLy8gV2UgaW5qZWN0IHRoZSBuZXh0Q29uZmlnT3V0cHV0IGhlcmUgc28gdGhhdCB3ZSBjYW4gdXNlIHRoZW0gaW4gdGhlIHJvdXRlXG4vLyBtb2R1bGUuXG5jb25zdCBuZXh0Q29uZmlnT3V0cHV0ID0gXCJcIlxuY29uc3Qgcm91dGVNb2R1bGUgPSBuZXcgQXBwUm91dGVSb3V0ZU1vZHVsZSh7XG4gICAgZGVmaW5pdGlvbjoge1xuICAgICAgICBraW5kOiBSb3V0ZUtpbmQuQVBQX1JPVVRFLFxuICAgICAgICBwYWdlOiBcIi9hcGkvd2ViaG9vay9jaGFubmVsLW1lc3NhZ2VzL3JvdXRlXCIsXG4gICAgICAgIHBhdGhuYW1lOiBcIi9hcGkvd2ViaG9vay9jaGFubmVsLW1lc3NhZ2VzXCIsXG4gICAgICAgIGZpbGVuYW1lOiBcInJvdXRlXCIsXG4gICAgICAgIGJ1bmRsZVBhdGg6IFwiYXBwL2FwaS93ZWJob29rL2NoYW5uZWwtbWVzc2FnZXMvcm91dGVcIlxuICAgIH0sXG4gICAgcmVzb2x2ZWRQYWdlUGF0aDogXCIvbW50L2MvVXNlcnMvaml6YXIvT25lRHJpdmUvRG9jdW1lbnRzL0Rpc2NvcmRCb3QvZnJvbnRlbmQvYXBwL2FwaS93ZWJob29rL2NoYW5uZWwtbWVzc2FnZXMvcm91dGUudHNcIixcbiAgICBuZXh0Q29uZmlnT3V0cHV0LFxuICAgIHVzZXJsYW5kXG59KTtcbi8vIFB1bGwgb3V0IHRoZSBleHBvcnRzIHRoYXQgd2UgbmVlZCB0byBleHBvc2UgZnJvbSB0aGUgbW9kdWxlLiBUaGlzIHNob3VsZFxuLy8gYmUgZWxpbWluYXRlZCB3aGVuIHdlJ3ZlIG1vdmVkIHRoZSBvdGhlciByb3V0ZXMgdG8gdGhlIG5ldyBmb3JtYXQuIFRoZXNlXG4vLyBhcmUgdXNlZCB0byBob29rIGludG8gdGhlIHJvdXRlLlxuY29uc3QgeyByZXF1ZXN0QXN5bmNTdG9yYWdlLCBzdGF0aWNHZW5lcmF0aW9uQXN5bmNTdG9yYWdlLCBzZXJ2ZXJIb29rcyB9ID0gcm91dGVNb2R1bGU7XG5jb25zdCBvcmlnaW5hbFBhdGhuYW1lID0gXCIvYXBpL3dlYmhvb2svY2hhbm5lbC1tZXNzYWdlcy9yb3V0ZVwiO1xuZnVuY3Rpb24gcGF0Y2hGZXRjaCgpIHtcbiAgICByZXR1cm4gX3BhdGNoRmV0Y2goe1xuICAgICAgICBzZXJ2ZXJIb29rcyxcbiAgICAgICAgc3RhdGljR2VuZXJhdGlvbkFzeW5jU3RvcmFnZVxuICAgIH0pO1xufVxuZXhwb3J0IHsgcm91dGVNb2R1bGUsIHJlcXVlc3RBc3luY1N0b3JhZ2UsIHN0YXRpY0dlbmVyYXRpb25Bc3luY1N0b3JhZ2UsIHNlcnZlckhvb2tzLCBvcmlnaW5hbFBhdGhuYW1lLCBwYXRjaEZldGNoLCAgfTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YXBwLXJvdXRlLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fwebhook%2Fchannel-messages%2Froute&page=%2Fapi%2Fwebhook%2Fchannel-messages%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fwebhook%2Fchannel-messages%2Froute.ts&appDir=%2Fmnt%2Fc%2FUsers%2Fjizar%2FOneDrive%2FDocuments%2FDiscordBot%2Ffrontend%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2Fmnt%2Fc%2FUsers%2Fjizar%2FOneDrive%2FDocuments%2FDiscordBot%2Ffrontend&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!\n");

/***/ }),

/***/ "(rsc)/./app/api/webhook/channel-messages/route.ts":
/*!***************************************************!*\
  !*** ./app/api/webhook/channel-messages/route.ts ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   GET: () => (/* binding */ GET),\n/* harmony export */   OPTIONS: () => (/* binding */ OPTIONS),\n/* harmony export */   POST: () => (/* binding */ POST)\n/* harmony export */ });\n/* harmony import */ var next_server__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/server */ \"(rsc)/./node_modules/next/dist/api/server.js\");\n/* harmony import */ var fs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! fs */ \"fs\");\n/* harmony import */ var fs__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(fs__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var path__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! path */ \"path\");\n/* harmony import */ var path__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(path__WEBPACK_IMPORTED_MODULE_2__);\n\n\n\n// CORS headers\nconst corsHeaders = {\n    \"Access-Control-Allow-Origin\": \"*\",\n    \"Access-Control-Allow-Methods\": \"GET, POST, OPTIONS\",\n    \"Access-Control-Allow-Headers\": \"Content-Type, Origin, Accept\",\n    \"Access-Control-Max-Age\": \"86400\"\n};\nfunction withCors(response) {\n    Object.entries(corsHeaders).forEach(([key, value])=>{\n        response.headers.set(key, value);\n    });\n    return response;\n}\n// Store messages in a JSON file in the public directory\nconst MESSAGES_FILE = path__WEBPACK_IMPORTED_MODULE_2___default().join(process.cwd(), \"public\", \"discord-messages.json\");\n// Ensure the public directory exists\nfunction ensurePublicDirectory() {\n    const publicDir = path__WEBPACK_IMPORTED_MODULE_2___default().join(process.cwd(), \"public\");\n    if (!fs__WEBPACK_IMPORTED_MODULE_1___default().existsSync(publicDir)) {\n        fs__WEBPACK_IMPORTED_MODULE_1___default().mkdirSync(publicDir, {\n            recursive: true\n        });\n    }\n}\n// Read existing messages from file\nfunction readMessages() {\n    try {\n        ensurePublicDirectory();\n        if (!fs__WEBPACK_IMPORTED_MODULE_1___default().existsSync(MESSAGES_FILE)) {\n            return [];\n        }\n        const fileContent = fs__WEBPACK_IMPORTED_MODULE_1___default().readFileSync(MESSAGES_FILE, \"utf-8\");\n        const data = JSON.parse(fileContent);\n        return Array.isArray(data.messages) ? data.messages : [];\n    } catch (error) {\n        console.error(\"Error reading messages file:\", error);\n        return [];\n    }\n}\n// Write messages to file\nfunction writeMessages(messages) {\n    try {\n        ensurePublicDirectory();\n        const data = {\n            lastUpdated: new Date().toISOString(),\n            totalMessages: messages.length,\n            messages: messages\n        };\n        fs__WEBPACK_IMPORTED_MODULE_1___default().writeFileSync(MESSAGES_FILE, JSON.stringify(data, null, 2));\n        console.log(`✅ Saved ${messages.length} messages to discord-messages.json`);\n    } catch (error) {\n        console.error(\"Error writing messages file:\", error);\n        throw error;\n    }\n}\nasync function POST(request) {\n    try {\n        const body = await request.json();\n        if (!body.channelId || !Array.isArray(body.messages)) {\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                success: false,\n                error: \"Invalid payload format\"\n            }, {\n                status: 400\n            });\n        }\n        // Read existing messages\n        const existingMessages = readMessages();\n        const existingIds = new Set(existingMessages.map((msg)=>msg.id));\n        // Filter out duplicates\n        const newMessages = body.messages.filter((msg)=>!existingIds.has(msg.id));\n        if (newMessages.length === 0) {\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                success: true,\n                message: \"No new messages to process\",\n                total: existingMessages.length\n            });\n        }\n        // Merge with existing messages\n        const allMessages = [\n            ...existingMessages,\n            ...newMessages\n        ];\n        // Keep only the most recent 1000 messages to prevent file from growing too large\n        const recentMessages = allMessages.sort((a, b)=>new Date(b.timestamp).getTime() - new Date(a.timestamp).getTime()).slice(0, 1000);\n        // Write to file\n        writeMessages(recentMessages);\n        console.log(`📝 Processed ${newMessages.length} new messages from channel ${body.channelId}`);\n        return withCors(next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            success: true,\n            message: `Processed ${newMessages.length} new messages`,\n            newMessages: newMessages.length,\n            total: recentMessages.length\n        }));\n    } catch (error) {\n        console.error(\"Error processing webhook:\", error);\n        return withCors(next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            success: false,\n            error: \"Internal server error\"\n        }, {\n            status: 500\n        }));\n    }\n}\nfunction OPTIONS(request) {\n    return withCors(new Response(null, {\n        status: 200\n    }));\n}\n// Discord message parser - converts raw messages to activity data\nfunction parseDiscordMessage(message) {\n    try {\n        const content = message.content.trim();\n        // Parse Spidey Bot messages for farm activities\n        const spideyBotMatch = content.match(/REGISTRO - fazenda_86(.+?)Autor:(.+?)\\s*\\|\\s*FIXO:\\s*(\\d+)/s);\n        if (spideyBotMatch) {\n            const actionPart = spideyBotMatch[1].trim();\n            const autor = spideyBotMatch[2].trim();\n            // Parse INSERIR ITEM (add item)\n            const addMatch = actionPart.match(/INSERIR ITEM\\s*Item adicionado:\\s*(.+?)\\s*x(\\d+)/);\n            if (addMatch) {\n                return {\n                    ...message,\n                    parseSuccess: true,\n                    tipo: \"adicionar\",\n                    categoria: \"inventario\",\n                    item: addMatch[1].trim(),\n                    quantidade: parseInt(addMatch[2]),\n                    autor: autor,\n                    displayText: `${autor} adicionou ${addMatch[2]}x ${addMatch[1]}`\n                };\n            }\n            // Parse REMOVER ITEM (remove item)  \n            const removeMatch = actionPart.match(/REMOVER ITEM\\s*Item removido:\\s*(.+?)\\s*x(\\d+)/);\n            if (removeMatch) {\n                return {\n                    ...message,\n                    parseSuccess: true,\n                    tipo: \"remover\",\n                    categoria: \"inventario\",\n                    item: removeMatch[1].trim(),\n                    quantidade: parseInt(removeMatch[2]),\n                    autor: autor,\n                    displayText: `${autor} removeu ${removeMatch[2]}x ${removeMatch[1]}`\n                };\n            }\n            // Parse DEPÓSITO (deposit money)\n            const depositMatch = actionPart.match(/DEPÓSITO\\s*Valor depositado:\\s*\\$([0-9,.]+)\\s*Ação:(.+?)Saldo após depósito:\\s*\\$([0-9,.]+)/);\n            if (depositMatch) {\n                const valor = parseFloat(depositMatch[1].replace(\",\", \"\"));\n                const acao = depositMatch[2].trim();\n                const saldo = parseFloat(depositMatch[3].replace(\",\", \"\"));\n                return {\n                    ...message,\n                    parseSuccess: true,\n                    tipo: \"deposito\",\n                    categoria: \"financeiro\",\n                    valor: valor,\n                    autor: autor,\n                    descricao: acao,\n                    displayText: `${autor} depositou $${valor.toFixed(2)} - ${acao}`\n                };\n            }\n            // Parse SAQUE (withdraw money)\n            const withdrawMatch = actionPart.match(/SAQUE\\s*Valor sacado:\\s*\\$([0-9,.]+).*?Autor:(.+?)\\s*\\|\\s*FIXO.*?Saldo após saque:\\s*\\$([0-9,.]+)/s);\n            if (withdrawMatch) {\n                const valor = parseFloat(withdrawMatch[1].replace(\",\", \"\"));\n                const autorSaque = withdrawMatch[2].trim();\n                const saldo = parseFloat(withdrawMatch[3].replace(\",\", \"\"));\n                return {\n                    ...message,\n                    parseSuccess: true,\n                    tipo: \"saque\",\n                    categoria: \"financeiro\",\n                    valor: valor,\n                    autor: autorSaque,\n                    descricao: `Saque de $${valor.toFixed(2)}`,\n                    displayText: `${autorSaque} sacou $${valor.toFixed(2)}`\n                };\n            }\n        }\n        // Try to parse other message formats (fallback patterns)\n        const itemAddPattern = /(?:Item adicionado|adicionou):\\s*(.+?)\\s*x(\\d+)/i;\n        const itemRemovePattern = /(?:Item removido|removeu):\\s*(.+?)\\s*x(\\d+)/i;\n        const moneyPattern = /\\$([0-9,.]+)/;\n        const addMatch = content.match(itemAddPattern);\n        if (addMatch) {\n            return {\n                ...message,\n                parseSuccess: true,\n                tipo: \"adicionar\",\n                categoria: \"inventario\",\n                item: addMatch[1].trim(),\n                quantidade: parseInt(addMatch[2]),\n                autor: message.author || \"Sistema\",\n                displayText: `${message.author} adicionou ${addMatch[2]}x ${addMatch[1]}`\n            };\n        }\n        const removeMatch = content.match(itemRemovePattern);\n        if (removeMatch) {\n            return {\n                ...message,\n                parseSuccess: true,\n                tipo: \"remover\",\n                categoria: \"inventario\",\n                item: removeMatch[1].trim(),\n                quantidade: parseInt(removeMatch[2]),\n                autor: message.author || \"Sistema\",\n                displayText: `${message.author} removeu ${removeMatch[2]}x ${removeMatch[1]}`\n            };\n        }\n        // Parse SAQUE (withdrawal) messages - format: Zero Bala sacou $2000 do caixa\n        if (content.includes(\"SAQUE\") && content.includes(\"Valor sacado:\")) {\n            const valorMatch = content.match(/Valor sacado:\\s*\\$([0-9,.]+)/);\n            const autorMatch = content.match(/Autor:(.+?)\\s*\\|/);\n            if (valorMatch && autorMatch) {\n                const valor = parseFloat(valorMatch[1].replace(\",\", \"\"));\n                const autorSaque = autorMatch[1].trim();\n                return {\n                    ...message,\n                    parseSuccess: true,\n                    tipo: \"saque\",\n                    categoria: \"financeiro\",\n                    valor: valor,\n                    autor: autorSaque,\n                    descricao: `Saque de $${valor.toFixed(2)}`,\n                    displayText: `sacou do caixa`\n                };\n            }\n        }\n        // Parse DEPÓSITO (deposit) messages - format: jack sparrow vendeu 4 animais no matadouro por $160\n        if (content.includes(\"DEP\\xd3SITO\") && content.includes(\"Valor depositado:\")) {\n            const valorMatch = content.match(/Valor depositado:\\s*\\$([0-9,.]+)/);\n            const acaoMatch = content.match(/Ação:(.+?)Saldo após depósito:/);\n            if (valorMatch && acaoMatch) {\n                const valor = parseFloat(valorMatch[1].replace(\",\", \"\"));\n                const acao = acaoMatch[1].trim();\n                // Extract author from action \"jack sparrow vendeu 4 animais no matadouro\"\n                const vendeuMatch = acao.match(/^(.+?)\\s+vendeu\\s+(\\d+)\\s+animais\\s+no\\s+matadouro/);\n                if (vendeuMatch) {\n                    const autorDeposito = vendeuMatch[1].trim();\n                    const quantidade = vendeuMatch[2];\n                    return {\n                        ...message,\n                        parseSuccess: true,\n                        tipo: \"deposito\",\n                        categoria: \"financeiro\",\n                        valor: valor,\n                        autor: autorDeposito,\n                        descricao: `Vendeu ${quantidade} animais no matadouro`,\n                        displayText: `vendeu ${quantidade} animais no matadouro por`\n                    };\n                }\n                // Fallback for other deposit actions\n                return {\n                    ...message,\n                    parseSuccess: true,\n                    tipo: \"deposito\",\n                    categoria: \"financeiro\",\n                    valor: valor,\n                    autor: \"Sistema\",\n                    descricao: acao,\n                    displayText: `Sistema depositou $${valor.toFixed(2)} no caixa`\n                };\n            }\n        }\n        const moneyMatch = content.match(moneyPattern);\n        if (moneyMatch && (content.toLowerCase().includes(\"deposit\") || content.toLowerCase().includes(\"saque\") || content.toLowerCase().includes(\"vendeu\"))) {\n            const valor = parseFloat(moneyMatch[1].replace(\",\", \"\"));\n            return {\n                ...message,\n                parseSuccess: true,\n                tipo: content.toLowerCase().includes(\"saque\") ? \"saque\" : \"deposito\",\n                categoria: \"financeiro\",\n                valor: valor,\n                autor: message.author || \"Sistema\",\n                displayText: content.substring(0, 100)\n            };\n        }\n        // Return unparsed message\n        return {\n            ...message,\n            parseSuccess: false,\n            categoria: \"sistema\",\n            displayText: content.substring(0, 100)\n        };\n    } catch (error) {\n        console.error(\"Parse error:\", error);\n        return {\n            ...message,\n            parseSuccess: false,\n            categoria: \"sistema\",\n            displayText: message.content.substring(0, 100)\n        };\n    }\n}\nasync function GET(request) {\n    try {\n        const messages = readMessages();\n        // Parse all messages and return parsed activities\n        const parsedMessages = messages.map(parseDiscordMessage);\n        console.log(`📊 Parsed ${parsedMessages.length} messages, ${parsedMessages.filter((m)=>m.parseSuccess).length} successfully parsed`);\n        return withCors(next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            success: true,\n            messages: parsedMessages,\n            total: parsedMessages.length,\n            lastUpdated: messages.length > 0 ? messages[0]?.timestamp : null,\n            parsed: parsedMessages.filter((m)=>m.parseSuccess).length\n        }));\n    } catch (error) {\n        console.error(\"Error reading messages:\", error);\n        return withCors(next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            success: false,\n            error: \"Failed to read messages\"\n        }, {\n            status: 500\n        }));\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./app/api/webhook/channel-messages/route.ts\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../../webpack-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next"], () => (__webpack_exec__("(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fwebhook%2Fchannel-messages%2Froute&page=%2Fapi%2Fwebhook%2Fchannel-messages%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fwebhook%2Fchannel-messages%2Froute.ts&appDir=%2Fmnt%2Fc%2FUsers%2Fjizar%2FOneDrive%2FDocuments%2FDiscordBot%2Ffrontend%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2Fmnt%2Fc%2FUsers%2Fjizar%2FOneDrive%2FDocuments%2FDiscordBot%2Ffrontend&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!")));
module.exports = __webpack_exports__;

})();