"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "app/api/webhook/channel-messages/route";
exports.ids = ["app/api/webhook/channel-messages/route"];
exports.modules = {

/***/ "next/dist/compiled/next-server/app-page.runtime.dev.js":
/*!*************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-page.runtime.dev.js" ***!
  \*************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/app-page.runtime.dev.js");

/***/ }),

/***/ "next/dist/compiled/next-server/app-route.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-route.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/app-route.runtime.dev.js");

/***/ }),

/***/ "fs":
/*!*********************!*\
  !*** external "fs" ***!
  \*********************/
/***/ ((module) => {

module.exports = require("fs");

/***/ }),

/***/ "path":
/*!***********************!*\
  !*** external "path" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("path");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fwebhook%2Fchannel-messages%2Froute&page=%2Fapi%2Fwebhook%2Fchannel-messages%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fwebhook%2Fchannel-messages%2Froute.ts&appDir=C%3A%5CUsers%5Cjizar%5COneDrive%5CDocuments%5CDiscordBot%5Cfrontend%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5Cjizar%5COneDrive%5CDocuments%5CDiscordBot%5Cfrontend&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!":

  !*** ./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fwebhook%2Fchannel-messages%2Froute&page=%2Fapi%2Fwebhook%2Fchannel-messages%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fwebhook%2Fchannel-messages%2Froute.ts&appDir=C%3A%5CUsers%5Cjizar%5COneDrive%5CDocuments%5CDiscordBot%5Cfrontend%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5Cjizar%5COneDrive%5CDocuments%5CDiscordBot%5Cfrontend&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D! ***!
  \************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   originalPathname: () => (/* binding */ originalPathname),\n/* harmony export */   patchFetch: () => (/* binding */ patchFetch),\n/* harmony export */   requestAsyncStorage: () => (/* binding */ requestAsyncStorage),\n/* harmony export */   routeModule: () => (/* binding */ routeModule),\n/* harmony export */   serverHooks: () => (/* binding */ serverHooks),\n/* harmony export */   staticGenerationAsyncStorage: () => (/* binding */ staticGenerationAsyncStorage)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/future/route-modules/app-route/module.compiled */ \"(rsc)/./node_modules/next/dist/server/future/route-modules/app-route/module.compiled.js\");\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/future/route-kind */ \"(rsc)/./node_modules/next/dist/server/future/route-kind.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/server/lib/patch-fetch */ \"(rsc)/./node_modules/next/dist/server/lib/patch-fetch.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var C_Users_jizar_OneDrive_Documents_DiscordBot_frontend_app_api_webhook_channel_messages_route_ts__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./app/api/webhook/channel-messages/route.ts */ \"(rsc)/./app/api/webhook/channel-messages/route.ts\");\n\n\n\n\n// We inject the nextConfigOutput here so that we can use them in the route\n// module.\nconst nextConfigOutput = \"\"\nconst routeModule = new next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__.AppRouteRouteModule({\n    definition: {\n        kind: next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.APP_ROUTE,\n        page: \"/api/webhook/channel-messages/route\",\n        pathname: \"/api/webhook/channel-messages\",\n        filename: \"route\",\n        bundlePath: \"app/api/webhook/channel-messages/route\"\n    },\n    resolvedPagePath: \"C:\\\\Users\\\\jizar\\\\OneDrive\\\\Documents\\\\DiscordBot\\\\frontend\\\\app\\\\api\\\\webhook\\\\channel-messages\\\\route.ts\",\n    nextConfigOutput,\n    userland: C_Users_jizar_OneDrive_Documents_DiscordBot_frontend_app_api_webhook_channel_messages_route_ts__WEBPACK_IMPORTED_MODULE_3__\n});\n// Pull out the exports that we need to expose from the module. This should\n// be eliminated when we've moved the other routes to the new format. These\n// are used to hook into the route.\nconst { requestAsyncStorage, staticGenerationAsyncStorage, serverHooks } = routeModule;\nconst originalPathname = \"/api/webhook/channel-messages/route\";\nfunction patchFetch() {\n    return (0,next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__.patchFetch)({\n        serverHooks,\n        staticGenerationAsyncStorage\n    });\n}\n\n\n//# sourceMappingURL=app-route.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LWFwcC1sb2FkZXIuanM/bmFtZT1hcHAlMkZhcGklMkZ3ZWJob29rJTJGY2hhbm5lbC1tZXNzYWdlcyUyRnJvdXRlJnBhZ2U9JTJGYXBpJTJGd2ViaG9vayUyRmNoYW5uZWwtbWVzc2FnZXMlMkZyb3V0ZSZhcHBQYXRocz0mcGFnZVBhdGg9cHJpdmF0ZS1uZXh0LWFwcC1kaXIlMkZhcGklMkZ3ZWJob29rJTJGY2hhbm5lbC1tZXNzYWdlcyUyRnJvdXRlLnRzJmFwcERpcj1DJTNBJTVDVXNlcnMlNUNqaXphciU1Q09uZURyaXZlJTVDRG9jdW1lbnRzJTVDRGlzY29yZEJvdCU1Q2Zyb250ZW5kJTVDYXBwJnBhZ2VFeHRlbnNpb25zPXRzeCZwYWdlRXh0ZW5zaW9ucz10cyZwYWdlRXh0ZW5zaW9ucz1qc3gmcGFnZUV4dGVuc2lvbnM9anMmcm9vdERpcj1DJTNBJTVDVXNlcnMlNUNqaXphciU1Q09uZURyaXZlJTVDRG9jdW1lbnRzJTVDRGlzY29yZEJvdCU1Q2Zyb250ZW5kJmlzRGV2PXRydWUmdHNjb25maWdQYXRoPXRzY29uZmlnLmpzb24mYmFzZVBhdGg9JmFzc2V0UHJlZml4PSZuZXh0Q29uZmlnT3V0cHV0PSZwcmVmZXJyZWRSZWdpb249Jm1pZGRsZXdhcmVDb25maWc9ZTMwJTNEISIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7QUFBc0c7QUFDdkM7QUFDYztBQUMwRDtBQUN2STtBQUNBO0FBQ0E7QUFDQSx3QkFBd0IsZ0hBQW1CO0FBQzNDO0FBQ0EsY0FBYyx5RUFBUztBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsWUFBWTtBQUNaLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQSxRQUFRLGlFQUFpRTtBQUN6RTtBQUNBO0FBQ0EsV0FBVyw0RUFBVztBQUN0QjtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ3VIOztBQUV2SCIsInNvdXJjZXMiOlsid2VicGFjazovL3JlZG0tZGFzaGJvYXJkLz83YjdjIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFwcFJvdXRlUm91dGVNb2R1bGUgfSBmcm9tIFwibmV4dC9kaXN0L3NlcnZlci9mdXR1cmUvcm91dGUtbW9kdWxlcy9hcHAtcm91dGUvbW9kdWxlLmNvbXBpbGVkXCI7XG5pbXBvcnQgeyBSb3V0ZUtpbmQgfSBmcm9tIFwibmV4dC9kaXN0L3NlcnZlci9mdXR1cmUvcm91dGUta2luZFwiO1xuaW1wb3J0IHsgcGF0Y2hGZXRjaCBhcyBfcGF0Y2hGZXRjaCB9IGZyb20gXCJuZXh0L2Rpc3Qvc2VydmVyL2xpYi9wYXRjaC1mZXRjaFwiO1xuaW1wb3J0ICogYXMgdXNlcmxhbmQgZnJvbSBcIkM6XFxcXFVzZXJzXFxcXGppemFyXFxcXE9uZURyaXZlXFxcXERvY3VtZW50c1xcXFxEaXNjb3JkQm90XFxcXGZyb250ZW5kXFxcXGFwcFxcXFxhcGlcXFxcd2ViaG9va1xcXFxjaGFubmVsLW1lc3NhZ2VzXFxcXHJvdXRlLnRzXCI7XG4vLyBXZSBpbmplY3QgdGhlIG5leHRDb25maWdPdXRwdXQgaGVyZSBzbyB0aGF0IHdlIGNhbiB1c2UgdGhlbSBpbiB0aGUgcm91dGVcbi8vIG1vZHVsZS5cbmNvbnN0IG5leHRDb25maWdPdXRwdXQgPSBcIlwiXG5jb25zdCByb3V0ZU1vZHVsZSA9IG5ldyBBcHBSb3V0ZVJvdXRlTW9kdWxlKHtcbiAgICBkZWZpbml0aW9uOiB7XG4gICAgICAgIGtpbmQ6IFJvdXRlS2luZC5BUFBfUk9VVEUsXG4gICAgICAgIHBhZ2U6IFwiL2FwaS93ZWJob29rL2NoYW5uZWwtbWVzc2FnZXMvcm91dGVcIixcbiAgICAgICAgcGF0aG5hbWU6IFwiL2FwaS93ZWJob29rL2NoYW5uZWwtbWVzc2FnZXNcIixcbiAgICAgICAgZmlsZW5hbWU6IFwicm91dGVcIixcbiAgICAgICAgYnVuZGxlUGF0aDogXCJhcHAvYXBpL3dlYmhvb2svY2hhbm5lbC1tZXNzYWdlcy9yb3V0ZVwiXG4gICAgfSxcbiAgICByZXNvbHZlZFBhZ2VQYXRoOiBcIkM6XFxcXFVzZXJzXFxcXGppemFyXFxcXE9uZURyaXZlXFxcXERvY3VtZW50c1xcXFxEaXNjb3JkQm90XFxcXGZyb250ZW5kXFxcXGFwcFxcXFxhcGlcXFxcd2ViaG9va1xcXFxjaGFubmVsLW1lc3NhZ2VzXFxcXHJvdXRlLnRzXCIsXG4gICAgbmV4dENvbmZpZ091dHB1dCxcbiAgICB1c2VybGFuZFxufSk7XG4vLyBQdWxsIG91dCB0aGUgZXhwb3J0cyB0aGF0IHdlIG5lZWQgdG8gZXhwb3NlIGZyb20gdGhlIG1vZHVsZS4gVGhpcyBzaG91bGRcbi8vIGJlIGVsaW1pbmF0ZWQgd2hlbiB3ZSd2ZSBtb3ZlZCB0aGUgb3RoZXIgcm91dGVzIHRvIHRoZSBuZXcgZm9ybWF0LiBUaGVzZVxuLy8gYXJlIHVzZWQgdG8gaG9vayBpbnRvIHRoZSByb3V0ZS5cbmNvbnN0IHsgcmVxdWVzdEFzeW5jU3RvcmFnZSwgc3RhdGljR2VuZXJhdGlvbkFzeW5jU3RvcmFnZSwgc2VydmVySG9va3MgfSA9IHJvdXRlTW9kdWxlO1xuY29uc3Qgb3JpZ2luYWxQYXRobmFtZSA9IFwiL2FwaS93ZWJob29rL2NoYW5uZWwtbWVzc2FnZXMvcm91dGVcIjtcbmZ1bmN0aW9uIHBhdGNoRmV0Y2goKSB7XG4gICAgcmV0dXJuIF9wYXRjaEZldGNoKHtcbiAgICAgICAgc2VydmVySG9va3MsXG4gICAgICAgIHN0YXRpY0dlbmVyYXRpb25Bc3luY1N0b3JhZ2VcbiAgICB9KTtcbn1cbmV4cG9ydCB7IHJvdXRlTW9kdWxlLCByZXF1ZXN0QXN5bmNTdG9yYWdlLCBzdGF0aWNHZW5lcmF0aW9uQXN5bmNTdG9yYWdlLCBzZXJ2ZXJIb29rcywgb3JpZ2luYWxQYXRobmFtZSwgcGF0Y2hGZXRjaCwgIH07XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWFwcC1yb3V0ZS5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fwebhook%2Fchannel-messages%2Froute&page=%2Fapi%2Fwebhook%2Fchannel-messages%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fwebhook%2Fchannel-messages%2Froute.ts&appDir=C%3A%5CUsers%5Cjizar%5COneDrive%5CDocuments%5CDiscordBot%5Cfrontend%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5Cjizar%5COneDrive%5CDocuments%5CDiscordBot%5Cfrontend&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!\n");

/***/ }),

/***/ "(rsc)/./app/api/webhook/channel-messages/route.ts":
/*!***************************************************!*\
  !*** ./app/api/webhook/channel-messages/route.ts ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   GET: () => (/* binding */ GET),\n/* harmony export */   OPTIONS: () => (/* binding */ OPTIONS),\n/* harmony export */   POST: () => (/* binding */ POST),\n/* harmony export */   dynamic: () => (/* binding */ dynamic)\n/* harmony export */ });\n/* harmony import */ var next_server__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/server */ \"(rsc)/./node_modules/next/dist/api/server.js\");\n/* harmony import */ var fs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! fs */ \"fs\");\n/* harmony import */ var fs__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(fs__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var path__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! path */ \"path\");\n/* harmony import */ var path__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(path__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _sse_manager__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../sse-manager */ \"(rsc)/./app/api/webhook/sse-manager.ts\");\n\n\n\n\n// Disable static generation for this API route\nconst dynamic = \"force-dynamic\";\n// CORS headers\nconst corsHeaders = {\n    \"Access-Control-Allow-Origin\": \"*\",\n    \"Access-Control-Allow-Methods\": \"GET, POST, OPTIONS\",\n    \"Access-Control-Allow-Headers\": \"Content-Type, Origin, Accept\",\n    \"Access-Control-Max-Age\": \"86400\"\n};\nfunction withCors(response) {\n    Object.entries(corsHeaders).forEach(([key, value])=>{\n        response.headers.set(key, value);\n    });\n    return response;\n}\n// Store messages in a JSON file in the public directory\nconst MESSAGES_FILE = path__WEBPACK_IMPORTED_MODULE_2___default().join(process.cwd(), \"public\", \"discord-messages.json\");\n// Ensure the public directory exists\nfunction ensurePublicDirectory() {\n    const publicDir = path__WEBPACK_IMPORTED_MODULE_2___default().join(process.cwd(), \"public\");\n    if (!fs__WEBPACK_IMPORTED_MODULE_1___default().existsSync(publicDir)) {\n        fs__WEBPACK_IMPORTED_MODULE_1___default().mkdirSync(publicDir, {\n            recursive: true\n        });\n    }\n}\n// Read existing messages from file\nfunction readMessages() {\n    try {\n        ensurePublicDirectory();\n        if (!fs__WEBPACK_IMPORTED_MODULE_1___default().existsSync(MESSAGES_FILE)) {\n            return [];\n        }\n        const fileContent = fs__WEBPACK_IMPORTED_MODULE_1___default().readFileSync(MESSAGES_FILE, \"utf-8\");\n        const data = JSON.parse(fileContent);\n        return Array.isArray(data.messages) ? data.messages : [];\n    } catch (error) {\n        console.error(\"Error reading messages file:\", error);\n        return [];\n    }\n}\n// Write messages to file\nfunction writeMessages(messages) {\n    try {\n        ensurePublicDirectory();\n        const data = {\n            lastUpdated: new Date().toISOString(),\n            totalMessages: messages.length,\n            messages: messages\n        };\n        fs__WEBPACK_IMPORTED_MODULE_1___default().writeFileSync(MESSAGES_FILE, JSON.stringify(data, null, 2));\n        console.log(`✅ Saved ${messages.length} messages to discord-messages.json`);\n    } catch (error) {\n        console.error(\"Error writing messages file:\", error);\n        throw error;\n    }\n}\nasync function POST(request) {\n    try {\n        const body = await request.json();\n        if (!body.channelId || !Array.isArray(body.messages)) {\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                success: false,\n                error: \"Invalid payload format\"\n            }, {\n                status: 400\n            });\n        }\n        // Read existing messages\n        const existingMessages = readMessages();\n        const existingIds = new Set(existingMessages.map((msg)=>msg.id));\n        // Simple deduplication based only on message ID and timestamp\n        const newMessages = body.messages.filter((msg)=>{\n            // Only check if we've seen this exact message ID before\n            if (existingIds.has(msg.id)) {\n                return false;\n            }\n            // Also check for same timestamp to catch rapid duplicates\n            const msgTimestamp = new Date(msg.timestamp).getTime();\n            const duplicateByTime = existingMessages.some((existing)=>Math.abs(new Date(existing.timestamp).getTime() - msgTimestamp) < 1000 // Within 1 second\n                 && existing.author === msg.author);\n            return !duplicateByTime;\n        });\n        if (newMessages.length === 0) {\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                success: true,\n                message: \"No new messages to process\",\n                total: existingMessages.length\n            });\n        }\n        // Merge with existing messages\n        const allMessages = [\n            ...existingMessages,\n            ...newMessages\n        ];\n        // Keep only the most recent 1000 messages to prevent file from growing too large\n        const recentMessages = allMessages.sort((a, b)=>new Date(b.timestamp).getTime() - new Date(a.timestamp).getTime()).slice(0, 1000);\n        // Write to file\n        writeMessages(recentMessages);\n        console.log(`📝 Processed ${newMessages.length} new messages from channel ${body.channelId}`);\n        // Create a simple notification mechanism using a timestamp file\n        // This will allow the frontend to detect when new data is available\n        const notificationFile = path__WEBPACK_IMPORTED_MODULE_2___default().join(process.cwd(), \"public\", \"last-update.json\");\n        try {\n            const updateInfo = {\n                lastUpdate: new Date().toISOString(),\n                newMessages: newMessages.length,\n                totalMessages: recentMessages.length,\n                timestamp: Date.now() // Add timestamp for easier comparison\n            };\n            fs__WEBPACK_IMPORTED_MODULE_1___default().writeFileSync(notificationFile, JSON.stringify(updateInfo));\n            console.log(\"\\uD83D\\uDCE1 Created update notification for frontend\");\n            // NOTIFY SSE CLIENTS IMMEDIATELY\n            try {\n                _sse_manager__WEBPACK_IMPORTED_MODULE_3__[\"default\"].getInstance().notifyAll({\n                    type: \"new-messages\",\n                    count: newMessages.length,\n                    total: recentMessages.length,\n                    timestamp: new Date().toISOString()\n                });\n                console.log(`🚀 Notified SSE clients of ${newMessages.length} new messages`);\n            } catch (sseError) {\n                console.error(\"Failed to notify SSE clients:\", sseError);\n            }\n        } catch (error) {\n            console.warn(\"Could not write notification file:\", error);\n        }\n        return withCors(next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            success: true,\n            message: `Processed ${newMessages.length} new messages`,\n            newMessages: newMessages.length,\n            total: recentMessages.length,\n            lastUpdate: new Date().toISOString()\n        }));\n    } catch (error) {\n        console.error(\"Error processing webhook:\", error);\n        return withCors(next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            success: false,\n            error: \"Internal server error\"\n        }, {\n            status: 500\n        }));\n    }\n}\nfunction OPTIONS(request) {\n    return withCors(new Response(null, {\n        status: 200\n    }));\n}\n// Discord message parser - converts raw messages to activity data\nfunction parseDiscordMessage(message) {\n    try {\n        const content = message.content.trim();\n        // Parse Spidey Bot messages for farm activities\n        // Try CAIXA messages first (deposits/withdrawals) - they don't have \"Autor:\" field\n        const caixaMatch = content.match(/REGISTRO - fazenda_86\\s*CAIXA ORGANIZAÇÃO\\s*-\\s*(DEPÓSITO|SAQUE)(.+?)Autor:(.+?)\\s*\\|\\s*FIXO:\\s*(\\d+)/s);\n        if (caixaMatch) {\n            const transactionType = caixaMatch[1].trim();\n            const actionPart = caixaMatch[2].trim();\n            const autor = caixaMatch[3].trim();\n            if (transactionType === \"DEP\\xd3SITO\") {\n                // Parse DEPÓSITO (deposit money) - with \"Ação:\" (for sales/actions)\n                const depositWithActionMatch = actionPart.match(/Valor depositado:\\s*\\$([0-9,.]+)\\s*Ação:(.+?)Saldo após depósito:\\s*\\$([0-9,.]+)/);\n                if (depositWithActionMatch) {\n                    const valor = parseFloat(depositWithActionMatch[1].replace(\",\", \"\"));\n                    const acao = depositWithActionMatch[2].trim();\n                    const saldo = parseFloat(depositWithActionMatch[3].replace(\",\", \"\"));\n                    return {\n                        ...message,\n                        parseSuccess: true,\n                        tipo: \"venda\",\n                        categoria: \"financeiro\",\n                        valor: valor,\n                        autor: autor,\n                        descricao: acao,\n                        displayText: `${autor} ${acao} por $${valor.toFixed(2)}`,\n                        confidence: \"high\"\n                    };\n                }\n            } else if (transactionType === \"SAQUE\") {\n                // Parse SAQUE (withdraw money)\n                const withdrawMatch = actionPart.match(/Valor sacado:\\s*\\$([0-9,.]+).*?Saldo após saque:\\s*\\$([0-9,.]+)/s);\n                if (withdrawMatch) {\n                    const valor = parseFloat(withdrawMatch[1].replace(\",\", \"\"));\n                    const saldo = parseFloat(withdrawMatch[3].replace(\",\", \"\"));\n                    return {\n                        ...message,\n                        parseSuccess: true,\n                        tipo: \"saque\",\n                        categoria: \"financeiro\",\n                        valor: valor,\n                        autor: autor,\n                        descricao: `Saque de $${valor.toFixed(2)}`,\n                        displayText: `${autor} sacou $${valor.toFixed(2)} do caixa`,\n                        confidence: \"high\"\n                    };\n                }\n            }\n        }\n        // Then try BAÚ messages (inventory) - they have \"Autor:\" field\n        const spideyBotMatch = content.match(/REGISTRO - fazenda_86(.+?)Autor:(.+?)\\s*\\|\\s*FIXO:\\s*(\\d+)/s);\n        if (spideyBotMatch) {\n            const actionPart = spideyBotMatch[1].trim();\n            const autor = spideyBotMatch[2].trim();\n            // Parse INSERIR ITEM (add item)\n            const addMatch = actionPart.match(/INSERIR ITEM\\s*Item adicionado:\\s*(.+?)\\s*x(\\d+)/);\n            if (addMatch) {\n                return {\n                    ...message,\n                    parseSuccess: true,\n                    tipo: \"adicionar\",\n                    categoria: \"inventario\",\n                    item: addMatch[1].trim(),\n                    quantidade: parseInt(addMatch[2]),\n                    autor: autor,\n                    displayText: `${autor} adicionou ${addMatch[2]}x ${addMatch[1]}`\n                };\n            }\n            // Parse REMOVER ITEM (remove item)  \n            const removeMatch = actionPart.match(/REMOVER ITEM\\s*Item removido:\\s*(.+?)\\s*x(\\d+)/);\n            if (removeMatch) {\n                return {\n                    ...message,\n                    parseSuccess: true,\n                    tipo: \"remover\",\n                    categoria: \"inventario\",\n                    item: removeMatch[1].trim(),\n                    quantidade: parseInt(removeMatch[2]),\n                    autor: autor,\n                    displayText: `${autor} removeu ${removeMatch[2]}x ${removeMatch[1]}`\n                };\n            }\n        }\n        // Try to parse other message formats (fallback patterns)\n        const itemAddPattern = /(?:Item adicionado|adicionou):\\s*(.+?)\\s*x(\\d+)/i;\n        const itemRemovePattern = /(?:Item removido|removeu):\\s*(.+?)\\s*x(\\d+)/i;\n        const moneyPattern = /\\$([0-9,.]+)/;\n        const addMatch = content.match(itemAddPattern);\n        if (addMatch) {\n            return {\n                ...message,\n                parseSuccess: true,\n                tipo: \"adicionar\",\n                categoria: \"inventario\",\n                item: addMatch[1].trim(),\n                quantidade: parseInt(addMatch[2]),\n                autor: message.author || \"Sistema\",\n                displayText: `${message.author} adicionou ${addMatch[2]}x ${addMatch[1]}`\n            };\n        }\n        const removeMatch = content.match(itemRemovePattern);\n        if (removeMatch) {\n            return {\n                ...message,\n                parseSuccess: true,\n                tipo: \"remover\",\n                categoria: \"inventario\",\n                item: removeMatch[1].trim(),\n                quantidade: parseInt(removeMatch[2]),\n                autor: message.author || \"Sistema\",\n                displayText: `${message.author} removeu ${removeMatch[2]}x ${removeMatch[1]}`\n            };\n        }\n        // Parse SAQUE (withdrawal) messages - format: Zero Bala sacou $2000 do caixa\n        if (content.includes(\"SAQUE\") && content.includes(\"Valor sacado:\")) {\n            const valorMatch = content.match(/Valor sacado:\\s*\\$([0-9,.]+)/);\n            const autorMatch = content.match(/Autor:(.+?)\\s*\\|/);\n            if (valorMatch && autorMatch) {\n                const valor = parseFloat(valorMatch[1].replace(\",\", \"\"));\n                const autorSaque = autorMatch[1].trim();\n                return {\n                    ...message,\n                    parseSuccess: true,\n                    tipo: \"saque\",\n                    categoria: \"financeiro\",\n                    valor: valor,\n                    autor: autorSaque,\n                    descricao: `Saque de $${valor.toFixed(2)}`,\n                    displayText: `sacou do caixa`\n                };\n            }\n        }\n        // Parse DEPÓSITO (deposit) messages - format: jack sparrow vendeu 4 animais no matadouro por $160\n        if (content.includes(\"DEP\\xd3SITO\") && content.includes(\"Valor depositado:\")) {\n            const valorMatch = content.match(/Valor depositado:\\s*\\$([0-9,.]+)/);\n            const acaoMatch = content.match(/Ação:(.+?)Saldo após depósito:/);\n            if (valorMatch && acaoMatch) {\n                const valor = parseFloat(valorMatch[1].replace(\",\", \"\"));\n                const acao = acaoMatch[1].trim();\n                // Extract author from action \"jack sparrow vendeu 4 animais no matadouro\"\n                const vendeuMatch = acao.match(/^(.+?)\\s+vendeu\\s+(\\d+)\\s+animais\\s+no\\s+matadouro/);\n                if (vendeuMatch) {\n                    const autorDeposito = vendeuMatch[1].trim();\n                    const quantidade = vendeuMatch[2];\n                    return {\n                        ...message,\n                        parseSuccess: true,\n                        tipo: \"deposito\",\n                        categoria: \"financeiro\",\n                        valor: valor,\n                        autor: autorDeposito,\n                        descricao: `Vendeu ${quantidade} animais no matadouro`,\n                        displayText: `vendeu ${quantidade} animais no matadouro por`\n                    };\n                }\n                // Fallback for other deposit actions\n                return {\n                    ...message,\n                    parseSuccess: true,\n                    tipo: \"deposito\",\n                    categoria: \"financeiro\",\n                    valor: valor,\n                    autor: \"Sistema\",\n                    descricao: acao,\n                    displayText: `Sistema depositou $${valor.toFixed(2)} no caixa`\n                };\n            }\n        }\n        const moneyMatch = content.match(moneyPattern);\n        if (moneyMatch && (content.toLowerCase().includes(\"deposit\") || content.toLowerCase().includes(\"saque\") || content.toLowerCase().includes(\"vendeu\"))) {\n            const valor = parseFloat(moneyMatch[1].replace(\",\", \"\"));\n            return {\n                ...message,\n                parseSuccess: true,\n                tipo: content.toLowerCase().includes(\"saque\") ? \"saque\" : \"deposito\",\n                categoria: \"financeiro\",\n                valor: valor,\n                autor: message.author || \"Sistema\",\n                displayText: content.substring(0, 100)\n            };\n        }\n        // Return unparsed message\n        return {\n            ...message,\n            parseSuccess: false,\n            categoria: \"sistema\",\n            displayText: content.substring(0, 100)\n        };\n    } catch (error) {\n        console.error(\"Parse error:\", error);\n        return {\n            ...message,\n            parseSuccess: false,\n            categoria: \"sistema\",\n            displayText: message.content.substring(0, 100)\n        };\n    }\n}\nasync function GET(request) {\n    try {\n        const messages = readMessages();\n        // Parse all messages and return parsed activities\n        const parsedMessages = messages.map(parseDiscordMessage);\n        console.log(`📊 Parsed ${parsedMessages.length} messages, ${parsedMessages.filter((m)=>m.parseSuccess).length} successfully parsed`);\n        return withCors(next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            success: true,\n            messages: parsedMessages,\n            total: parsedMessages.length,\n            lastUpdated: messages.length > 0 ? messages[0]?.timestamp : null,\n            parsed: parsedMessages.filter((m)=>m.parseSuccess).length\n        }));\n    } catch (error) {\n        console.error(\"Error reading messages:\", error);\n        return withCors(next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            success: false,\n            error: \"Failed to read messages\"\n        }, {\n            status: 500\n        }));\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./app/api/webhook/channel-messages/route.ts\n");

/***/ }),

/***/ "(rsc)/./app/api/webhook/sse-manager.ts":
/*!****************************************!*\
  !*** ./app/api/webhook/sse-manager.ts ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n// Global SSE client manager\nclass SSEManager {\n    constructor(){\n        this.clients = new Set();\n    }\n    static getInstance() {\n        if (!SSEManager.instance) {\n            SSEManager.instance = new SSEManager();\n        }\n        return SSEManager.instance;\n    }\n    addClient(controller) {\n        this.clients.add(controller);\n        console.log(`📡 SSE client connected. Total clients: ${this.clients.size}`);\n    }\n    removeClient(controller) {\n        this.clients.delete(controller);\n        console.log(`📡 SSE client disconnected. Total clients: ${this.clients.size}`);\n    }\n    notifyAll(data) {\n        const message = `data: ${JSON.stringify(data)}\\n\\n`;\n        const encoder = new TextEncoder();\n        const encoded = encoder.encode(message);\n        console.log(`📢 Notifying ${this.clients.size} SSE clients:`, data);\n        this.clients.forEach((controller)=>{\n            try {\n                controller.enqueue(encoded);\n            } catch (error) {\n                console.error(\"Failed to send to client, removing:\", error);\n                this.clients.delete(controller);\n            }\n        });\n    }\n    getClientCount() {\n        return this.clients.size;\n    }\n}\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (SSEManager);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9hcHAvYXBpL3dlYmhvb2svc3NlLW1hbmFnZXIudHMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBLDRCQUE0QjtBQUM1QixNQUFNQTtJQUlKLGFBQXNCO1FBQ3BCLElBQUksQ0FBQ0MsT0FBTyxHQUFHLElBQUlDO0lBQ3JCO0lBRUEsT0FBT0MsY0FBMEI7UUFDL0IsSUFBSSxDQUFDSCxXQUFXSSxRQUFRLEVBQUU7WUFDeEJKLFdBQVdJLFFBQVEsR0FBRyxJQUFJSjtRQUM1QjtRQUNBLE9BQU9BLFdBQVdJLFFBQVE7SUFDNUI7SUFFQUMsVUFBVUMsVUFBMkMsRUFBUTtRQUMzRCxJQUFJLENBQUNMLE9BQU8sQ0FBQ00sR0FBRyxDQUFDRDtRQUNqQkUsUUFBUUMsR0FBRyxDQUFDLENBQUMsd0NBQXdDLEVBQUUsSUFBSSxDQUFDUixPQUFPLENBQUNTLElBQUksQ0FBQyxDQUFDO0lBQzVFO0lBRUFDLGFBQWFMLFVBQTJDLEVBQVE7UUFDOUQsSUFBSSxDQUFDTCxPQUFPLENBQUNXLE1BQU0sQ0FBQ047UUFDcEJFLFFBQVFDLEdBQUcsQ0FBQyxDQUFDLDJDQUEyQyxFQUFFLElBQUksQ0FBQ1IsT0FBTyxDQUFDUyxJQUFJLENBQUMsQ0FBQztJQUMvRTtJQUVBRyxVQUFVQyxJQUFTLEVBQVE7UUFDekIsTUFBTUMsVUFBVSxDQUFDLE1BQU0sRUFBRUMsS0FBS0MsU0FBUyxDQUFDSCxNQUFNLElBQUksQ0FBQztRQUNuRCxNQUFNSSxVQUFVLElBQUlDO1FBQ3BCLE1BQU1DLFVBQVVGLFFBQVFHLE1BQU0sQ0FBQ047UUFFL0JQLFFBQVFDLEdBQUcsQ0FBQyxDQUFDLGFBQWEsRUFBRSxJQUFJLENBQUNSLE9BQU8sQ0FBQ1MsSUFBSSxDQUFDLGFBQWEsQ0FBQyxFQUFFSTtRQUU5RCxJQUFJLENBQUNiLE9BQU8sQ0FBQ3FCLE9BQU8sQ0FBQ2hCLENBQUFBO1lBQ25CLElBQUk7Z0JBQ0ZBLFdBQVdpQixPQUFPLENBQUNIO1lBQ3JCLEVBQUUsT0FBT0ksT0FBTztnQkFDZGhCLFFBQVFnQixLQUFLLENBQUMsdUNBQXVDQTtnQkFDckQsSUFBSSxDQUFDdkIsT0FBTyxDQUFDVyxNQUFNLENBQUNOO1lBQ3RCO1FBQ0Y7SUFDRjtJQUVBbUIsaUJBQXlCO1FBQ3ZCLE9BQU8sSUFBSSxDQUFDeEIsT0FBTyxDQUFDUyxJQUFJO0lBQzFCO0FBQ0Y7QUFFQSxpRUFBZVYsVUFBVUEsRUFBQyIsInNvdXJjZXMiOlsid2VicGFjazovL3JlZG0tZGFzaGJvYXJkLy4vYXBwL2FwaS93ZWJob29rL3NzZS1tYW5hZ2VyLnRzP2JkYzciXSwic291cmNlc0NvbnRlbnQiOlsiLy8gR2xvYmFsIFNTRSBjbGllbnQgbWFuYWdlclxuY2xhc3MgU1NFTWFuYWdlciB7XG4gIHByaXZhdGUgc3RhdGljIGluc3RhbmNlOiBTU0VNYW5hZ2VyO1xuICBwcml2YXRlIGNsaWVudHM6IFNldDxSZWFkYWJsZVN0cmVhbURlZmF1bHRDb250cm9sbGVyPjtcblxuICBwcml2YXRlIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMuY2xpZW50cyA9IG5ldyBTZXQoKTtcbiAgfVxuXG4gIHN0YXRpYyBnZXRJbnN0YW5jZSgpOiBTU0VNYW5hZ2VyIHtcbiAgICBpZiAoIVNTRU1hbmFnZXIuaW5zdGFuY2UpIHtcbiAgICAgIFNTRU1hbmFnZXIuaW5zdGFuY2UgPSBuZXcgU1NFTWFuYWdlcigpO1xuICAgIH1cbiAgICByZXR1cm4gU1NFTWFuYWdlci5pbnN0YW5jZTtcbiAgfVxuXG4gIGFkZENsaWVudChjb250cm9sbGVyOiBSZWFkYWJsZVN0cmVhbURlZmF1bHRDb250cm9sbGVyKTogdm9pZCB7XG4gICAgdGhpcy5jbGllbnRzLmFkZChjb250cm9sbGVyKTtcbiAgICBjb25zb2xlLmxvZyhg8J+ToSBTU0UgY2xpZW50IGNvbm5lY3RlZC4gVG90YWwgY2xpZW50czogJHt0aGlzLmNsaWVudHMuc2l6ZX1gKTtcbiAgfVxuXG4gIHJlbW92ZUNsaWVudChjb250cm9sbGVyOiBSZWFkYWJsZVN0cmVhbURlZmF1bHRDb250cm9sbGVyKTogdm9pZCB7XG4gICAgdGhpcy5jbGllbnRzLmRlbGV0ZShjb250cm9sbGVyKTtcbiAgICBjb25zb2xlLmxvZyhg8J+ToSBTU0UgY2xpZW50IGRpc2Nvbm5lY3RlZC4gVG90YWwgY2xpZW50czogJHt0aGlzLmNsaWVudHMuc2l6ZX1gKTtcbiAgfVxuXG4gIG5vdGlmeUFsbChkYXRhOiBhbnkpOiB2b2lkIHtcbiAgICBjb25zdCBtZXNzYWdlID0gYGRhdGE6ICR7SlNPTi5zdHJpbmdpZnkoZGF0YSl9XFxuXFxuYDtcbiAgICBjb25zdCBlbmNvZGVyID0gbmV3IFRleHRFbmNvZGVyKCk7XG4gICAgY29uc3QgZW5jb2RlZCA9IGVuY29kZXIuZW5jb2RlKG1lc3NhZ2UpO1xuICAgIFxuICAgIGNvbnNvbGUubG9nKGDwn5OiIE5vdGlmeWluZyAke3RoaXMuY2xpZW50cy5zaXplfSBTU0UgY2xpZW50czpgLCBkYXRhKTtcbiAgICBcbiAgICB0aGlzLmNsaWVudHMuZm9yRWFjaChjb250cm9sbGVyID0+IHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGNvbnRyb2xsZXIuZW5xdWV1ZShlbmNvZGVkKTtcbiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoJ0ZhaWxlZCB0byBzZW5kIHRvIGNsaWVudCwgcmVtb3Zpbmc6JywgZXJyb3IpO1xuICAgICAgICB0aGlzLmNsaWVudHMuZGVsZXRlKGNvbnRyb2xsZXIpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgZ2V0Q2xpZW50Q291bnQoKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5jbGllbnRzLnNpemU7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgU1NFTWFuYWdlcjsiXSwibmFtZXMiOlsiU1NFTWFuYWdlciIsImNsaWVudHMiLCJTZXQiLCJnZXRJbnN0YW5jZSIsImluc3RhbmNlIiwiYWRkQ2xpZW50IiwiY29udHJvbGxlciIsImFkZCIsImNvbnNvbGUiLCJsb2ciLCJzaXplIiwicmVtb3ZlQ2xpZW50IiwiZGVsZXRlIiwibm90aWZ5QWxsIiwiZGF0YSIsIm1lc3NhZ2UiLCJKU09OIiwic3RyaW5naWZ5IiwiZW5jb2RlciIsIlRleHRFbmNvZGVyIiwiZW5jb2RlZCIsImVuY29kZSIsImZvckVhY2giLCJlbnF1ZXVlIiwiZXJyb3IiLCJnZXRDbGllbnRDb3VudCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./app/api/webhook/sse-manager.ts\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../../webpack-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next"], () => (__webpack_exec__("(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fwebhook%2Fchannel-messages%2Froute&page=%2Fapi%2Fwebhook%2Fchannel-messages%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fwebhook%2Fchannel-messages%2Froute.ts&appDir=C%3A%5CUsers%5Cjizar%5COneDrive%5CDocuments%5CDiscordBot%5Cfrontend%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5Cjizar%5COneDrive%5CDocuments%5CDiscordBot%5Cfrontend&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!")));
module.exports = __webpack_exports__;

})();